{"version":3,"sources":["input-footer.tsx"],"names":["InputFooter","styles","helperText","helperTextStyles","counterStyles","options","color","flexDirection","flexWrap","width","justifyContent","alignItems","React","isValidElement","counter","counterColor","charLength","maxLength"],"mappings":";;;;;;;AAAA;;AACA;;;;AAgBO,MAAMA,WAAuC,GAAG,CAAC;AACtDC,EAAAA,MADsD;AAEtDC,EAAAA,UAFsD;AAGtDC,EAAAA,gBAHsD;AAItDC,EAAAA,aAJsD;AAKtDC,EAAAA,OALsD;AAMtDC,EAAAA;AANsD,CAAD,KAOjD;AACJ,sBACE,yEACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,aAAa,EAAE,KAAjB;AAAwBC,MAAAA,QAAQ,EAAE;AAAlC,KAAD,EAA6CP,MAA7C;AAAb,kBACE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,KAAK,EAAE,KADF;AAELC,MAAAA,cAAc,EAAE,QAFX;AAGLC,MAAAA,UAAU,EAAE;AAHP;AADT,KAOG,OAAOT,UAAP,KAAsB,QAAtB,gBACC,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACC,gBAAD;AAAb,KAAkCD,UAAlC,CADD,GAEGA,UAAU,iBAAIU,eAAMC,cAAN,CAAqBX,UAArB,CAAd,GACFA,UADE,GAEA,IAXN,CADF,eAcE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,KAAK,EAAE,KADF;AAELC,MAAAA,cAAc,EAAE,QAFX;AAGLC,MAAAA,UAAU,EAAE;AAHP;AADT,KAOGN,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAES,OAAT,gBACC,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACV,aAAD;AAAb,kBACE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,KAAK,EAAED,OAAO,CAACU,YAAR,IAAwBT;AAD1B;AADT,KAKGD,OAAO,CAACW,UALX,CADF,EAQGX,OAAO,CAACY,SAAR,GAAoB,QAAQZ,OAAO,CAACY,SAApC,GAAgD,IARnD,CADD,GAWG,IAlBN,CAdF,CADF,CADF;AAuCD,CA/CM","sourcesContent":["import React from \"react\";\nimport { StyleProp, Text, TextStyle, View, ViewStyle } from \"react-native\";\n\ninterface InputFooterProps {\n  styles?: StyleProp<ViewStyle>;\n  helperText?: string | React.ReactNode;\n  helperTextStyles: StyleProp<TextStyle>;\n  options?: {\n    counter?: boolean;\n    charLength?: number;\n    maxLength?: number;\n    counterColor?: string;\n  };\n  counterStyles: StyleProp<TextStyle>;\n  color?: string;\n}\n\nexport const InputFooter: React.FC<InputFooterProps> = ({\n  styles,\n  helperText,\n  helperTextStyles,\n  counterStyles,\n  options,\n  color,\n}) => {\n  return (\n    <>\n      <View style={[{ flexDirection: \"row\", flexWrap: \"wrap\" }, styles]}>\n        <View\n          style={{\n            width: \"70%\",\n            justifyContent: \"center\",\n            alignItems: \"flex-start\",\n          }}\n        >\n          {typeof helperText === \"string\" ? (\n            <Text style={[helperTextStyles]}>{helperText}</Text>\n          ) : helperText && React.isValidElement(helperText) ? (\n            helperText\n          ) : null}\n        </View>\n        <View\n          style={{\n            width: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"flex-end\",\n          }}\n        >\n          {options?.counter ? (\n            <Text style={[counterStyles]}>\n              <Text\n                style={{\n                  color: options.counterColor || color,\n                }}\n              >\n                {options.charLength}\n              </Text>\n              {options.maxLength ? \" / \" + options.maxLength : null}\n            </Text>\n          ) : null}\n        </View>\n      </View>\n    </>\n  );\n};\n"]}